// src/lib/data.ts
/* eslint-disable @typescript-eslint/no-explicit-any */
import { createClient } from "@/lib/supabase/server";
import {
  FaYoutube,
  FaTiktok,
  FaInstagram,
  FaGithub,
  FaLinkedin,
} from "react-icons/fa";
import React from "react";

export const iconMap: { [key: string]: React.ElementType } = {
  FaYoutube,
  FaTiktok,
  FaInstagram,
  FaGithub,
  FaLinkedin,
};

export async function getGroupedSocialLinks() {
  const supabase = await createClient();
  const { data: links } = await supabase
    .from("social_links")
    .select("*")
    .order("order_index", { ascending: true });

  if (!links) return [];

  const grouped = links.reduce((acc, link) => {
    let group = acc.find(
      (g: { category: any }) => g.category === link.category
    );

    if (!group) {
      const color =
        link.category === "Code & Professional"
          ? "text-light"
          : link.category === "Social Media"
          ? "text-tertiary"
          : "text-primary";
      const borderColor = color.replace("text-", "border-");

      group = { category: link.category, color, borderColor, links: [] };
      acc.push(group);
    }

    group.links.push({
      icon: link.icon_id ? iconMap[link.icon_id] : null,
      name: link.name,
      desc: link.description || "",
      url: link.url,
      imageUrl: link.image_url || "",
    });

    return acc;
  }, [] as any[]);

  return grouped;
}

export async function getSiteSettings() {
  const supabase = await createClient();
  const { data } = await supabase.from("site_settings").select("key, value");

  if (!data) return {};

  const settings = data.reduce((acc, setting) => {
    acc[setting.key] = setting.value;
    return acc;
  }, {} as { [key: string]: string });

  return settings;
}
